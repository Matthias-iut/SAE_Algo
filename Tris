import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Tris {

    public static void main(String[] args) {
        //int[] données = générerDonnéesEntreBornes(1000000, 0, 1000000000);
        //System.out.println(Arrays.toString(données));

        int[] données = générerDonnées(1000000);
        int[] centPlusGrandesValeurs = new int[100];

        //triParInsertion(données); // trie le tableau en utilisant le tri par insertion
        //triParSelection(données); // trie le tableau en utilisant le tri par sélection
        //triAPeigne(données);
        //triComptage(données);

        //quicksort(0, données.length-1, données);
        //CentPlusGrandesValeurs(données, centPlusGrandesValeurs);
        //centPlusGrandesValeurs = triOpti(données, 100);
        long tempsDébut = System.nanoTime();
        triAPeigne(données);
        long tempsFin = System.nanoTime();
        //centPlusGrandesValeurs = TrupinBlanchet(données, 10000);
        //centPlusGrandesValeurs = triOpti(données, 100);
        //Arrays.sort(données);
        //CentPlusGrandesValeursJavaSort(données, centPlusGrandesValeurs);
        System.out.println("Temps de calcul en millisecondes: " + ((tempsFin - tempsDébut) / 1000000) );

        for (int s : centPlusGrandesValeurs)
            System.out.print(s+ " ");
        System.out.println("\nFin");
        //System.out.println(Arrays.toString(données));
    }

    public static int[] TrupinBlanchet(int[] tab, int nbMajorant){
        int [] nbValeur = new int [nbMajorant];
        int nbval1 = 0, nbval2 = tab.length/4, nbval3 = tab.length/2, nbval4 = (tab.length)*3/4;
        int majgg = nbval1;
        int majgd = nbval2;
        int majdg = nbval3;
        int majdd = nbval4;

        int pivot =0;
        int grandMaj ;
        int direction = 0;//0 gauche, 1 gauchedroite, 2 droitegauche, 3 droitedroite
        int j;

        for (j = nbval1; j < tab.length/4; j++)
            if (tab[j] > tab[majgg]) majgg = j;
        for (j = nbval2; j < tab.length/2; j++)
            if (tab[j] > tab[majgd]) majgd = j;
        for (j = nbval3; j < (tab.length)*3/4; j++)
            if (tab[j] > tab[majdg]) majdg = j;
        for (j = nbval4; j < tab.length; j++)
            if (tab[j] > tab[majdd]) majdd = j;

        int nbval=0;
        int posVal;
        while((nbval)<nbMajorant) {
            if(tab[majgg] >= tab[majgd] && tab[majgg]>= tab [majdg] && tab[majgg]>= tab [majdd]) {
                direction = 0;
                grandMaj = majgg;
                posVal = nbval1;
                nbval1++;
            }else if (tab[majgd] > tab[majgg] && tab[majgd]>= tab [majdg] && tab[majgd]>= tab [majdd]){
                direction = 1;
                grandMaj = majgd;
                posVal = nbval2;
                nbval2++;
            }else if(tab[majdg] > tab[majgg] && tab[majdg]> tab [majgd] && tab[majdg]>= tab [majdd]){
                direction= 2;
                grandMaj = majdg;
                posVal = nbval3;
                nbval3++;
            }else{
                direction= 3;
                grandMaj = majdd;
                posVal = nbval4;
                nbval4++;
            }

            nbValeur[nbval] = tab[grandMaj];
            pivot =  tab[grandMaj];
            tab[grandMaj]  = tab[posVal];
            tab[posVal] = pivot;
            nbval++;

            if(nbval<nbMajorant)
                if (direction==0)
                    for (j = nbval1; j < tab.length / 4; j++)
                        if (tab[j] > tab[majgg]) majgg = j;
                else if (direction == 1)
                    for (j = nbval2; j < tab.length / 2; j++)
                        if (tab[j] > tab[majgd]) majgd = j;
                else if (direction ==2)
                    for (j = nbval3; j < (tab.length)*3/4; j++)
                        if (tab[j] > tab[majdg]) majdg = j;
                else if (direction==3)
                    for (j = nbval4; j < tab.length; j++)
                        if (tab[j] > tab[majdd]) majdd = j;
        }
        return nbValeur;
    }


    public static void CentPlusGrandesValeurs (int[] tab, int[] CentValeurs){
        int pivot, posMaj;
        for(int i=0; i<100; i++){
            posMaj = i;
            for (int j=i; j<tab.length; j++)
                if (tab[j]>tab[posMaj]) posMaj=j;
            pivot = tab[i];
            tab[i]=tab[posMaj];
            tab[posMaj]=pivot;
            CentValeurs[i]=tab[i];
        }
    }
    public static void CentPlusGrandesValeursJavaSort(int[] tab, int[]CentValeurs){
        Arrays.sort(tab);
        for(int i=tab.length-1; i>tab.length-101; i--)
            CentValeurs[tab.length-i-1]=tab[i];
    }

    public static void triParInsertion(int[] tab){
        int j, pivot;
        for (int i=tab.length-1; i>=0; i--){
            j=i;
            pivot=tab[i];
            while(j>=1 && tab[j-1]>tab[i]){
                tab[j]=tab[j-1];
                j--;
            }
            tab[j]=pivot;
        }
        System.out.println("Tri par insertion effectué.");
    }
    public static int[] générerDonnéesEntreBornes(int n, int min, int max) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(max-min+1)+min; // nextInt(borne) retourne un int compris entre 0 inclus et borne exclus.
        return t;
    }

    public static void triParSelection (int[] tab){
        int posMin, pivot;
        for(int i=0; i<tab.length-1; i++){
            posMin = i;
            for(int j=i; j<tab.length; j++){
                if(tab[j]<tab[posMin]) posMin=j;
            }
            pivot=tab[i];
            tab[i]=tab[posMin];
            tab[posMin]=pivot;
        }
        System.out.println("Tri par sélection effectué.");
    }
    public static void triAPeigne (int[] tab){
        double ecart=tab.length;
        int pivot;
        boolean echangé;
        do{
            echangé=false;
            ecart=ecart/1.3;
            if (ecart<1) ecart=1;
            for(int i=0; i<tab.length-ecart; i++){
                if (tab[i]>tab[(int)(Math.floor(i+ecart))]){
                    pivot=tab[i];
                    tab[i]=tab[(int)(Math.floor(i+ecart))];
                    tab[(int)(Math.floor(i+ecart))]=pivot;
                    echangé=true;
                }
            }
        }while (echangé || ecart>1);
        System.out.println("Tri à peigne effectué.");
    }

    public static void triComptage (int[] tab){
        int min = tab[0], maj= tab[0];
        for (int i=0; i<tab.length; i++){
            if (tab[i]>maj) maj=tab[i];
            if (tab[i]<min) min=tab[i];
        }
        int[] tabCompteur = new int[maj-min+1];
        for (int i=0; i<tab.length; i++)
            tabCompteur[tab[i]-min]++;
        int j;
        int k=0;
        for (int i=0; i<tabCompteur.length; i++){
            j=0;
            while(j<tabCompteur[i]){
                tab[k]=i+min;
                k++;
                j++;
            }
        }
        System.out.println("Tri comptage effectué.");
    }


    public static int[] générerDonnées(int n) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(); // tirage aléatoire d'un int quelconque (compris entre -2^31 et 2^31-1)
        return t;
    }
}
