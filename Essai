import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.*;
import java.util.stream.Collectors;

public class Tris {

    public static void main(String[] args) {
        int[] données = générerDonnéesEntreBornes(100000000, 0, 1000);
        //System.out.println(Arrays.toString(données));

        //int[] données = générerDonnées(10);
        int[] centPlusGrandesValeurs = new int[100];

        //triParInsertion(données); // trie le tableau en utilisant le tri par insertion
        //triParSelection(données); // trie le tableau en utilisant le tri par sélection
        //triAPeigne(données);
        //triComptage(données);
        //CentPlusGrandesValeursJavaSort(données, centPlusGrandesValeurs);
        //quicksort(0, données.length-1, données);
        //CentPlusGrandesValeurs(données, centPlusGrandesValeurs);
        long tempsDébut = System.nanoTime();
        centPlusGrandesValeurs = triOpti(données, 100);
        long tempsFin = System.nanoTime();

        System.out.println("Temps de calcul en millisecondes: " + ((tempsFin - tempsDébut) / 1000000) );

        for (int s : centPlusGrandesValeurs)
            System.out.print(s+ " ");
        System.out.println("\nFin");
        //System.out.println(Arrays.toString(données));
    }

    public static int[] triOpti(int[] tab, int nbMajorant){
        int intervalle = tab.length/2;
        int [] nbValeur = new int [nbMajorant];
        int majg =0, tempG;
        int majd =tab.length-1;
        int nbval = 0;
        int pivot =0;
        int grandMaj ;
        int direction = 0;//0 gauche, 1 droite

        for (int i = nbval; i < intervalle; i++)
            if (tab[i] > tab[majg]) majg = i;
        for (int j = intervalle; j < tab.length; j++)
            if (tab[j] > tab[majd]) majd = j;

        while(nbval<nbMajorant) {
            if(tab[majd] > tab[majg]) {
                direction = 1;
                grandMaj = majd;
            }else {
                direction = 0;
                grandMaj = majg;
            }
            tempG = tab[majg];
            nbValeur[nbval] = tab[grandMaj];
            pivot =  tab[grandMaj];
            tab[grandMaj]  = tab[nbval];
            tab[nbval] = pivot;
            nbval++;

            if(direction==1 && tab[grandMaj] == tab[majg]) {
                majg = nbval;
                for (int i = nbval; i < intervalle; i++)
                    if (tab[i] > tab[majg]) majg = i;
            }
            if(nbval<nbMajorant) {
                if (direction == 0) {
                    for (int i = nbval; i < intervalle; i++)
                        if (tab[i] > tab[majg]) majg = i;
                } else {
                    for (int j = intervalle; j < tab.length; j++)
                        if (tab[j] > tab[majd]) majd = j;
                }
            }
        }
        return nbValeur;
    }


    public static void CentPlusGrandesValeurs (int[] tab, int[] CentValeurs){
        int pivot, posMaj;
        for(int i=0; i<100; i++){
            posMaj = i;
            for (int j=i; j<tab.length; j++)
                if (tab[j]>tab[posMaj]) posMaj=j;
            pivot = tab[i];
            tab[i]=tab[posMaj];
            tab[posMaj]=pivot;
            CentValeurs[i]=tab[i];
        }
    }
    public static void CentPlusGrandesValeursJavaSort(int[] tab, int[]CentValeurs){
        Arrays.sort(tab);
        for(int i=tab.length-1; i>tab.length-101; i--)
            CentValeurs[tab.length-i-1]=tab[i];
    }

    public static void triParInsertion(int[] tab){
        int j, pivot;
        for (int i=tab.length-1; i>=0; i--){
            j=i;
            pivot=tab[i];
            while(j>=1 && tab[j-1]>tab[i]){
                tab[j]=tab[j-1];
                j--;
            }
            tab[j]=pivot;
        }
        System.out.println("Tri par insertion effectué.");
    }
    public static int[] générerDonnéesEntreBornes(int n, int min, int max) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(max-min+1)+min; // nextInt(borne) retourne un int compris entre 0 inclus et borne exclus.
        return t;
    }
    /**
    public static void quickSort(int[] ar, int start, int end) {
        if (start <end) {
            int p = partition(ar, start, end);
            quickSort(ar, start, p-1);
            quickSort(ar, p+1, end);
        }
    }
    */
    /**
    public static int partition(int[] ar, int start, int end) {
        int pivot = ar[end];
        int i = start;
        for (int j = end; j>= start; j--) {
            if (ar[j] > pivot) {
                int temp1 = ar[i];
                ar[i] = ar[j];
                ar[j] = temp1;

                i = i+1;
            }
        }
        int temp2 = ar[i];
        ar[i] = ar[end];
        ar[end] = temp2;
        return i;
    }
     */
    public static void quicksort (int debut, int fin, int[] tab){
       if (debut < fin){
           int i = debut;
           for (int j = fin; j>= debut; j--)
               if (tab[j] > tab[fin]) {
                   int temp1 = tab[i];
                   tab[i] = tab[j];
                   tab[j] = temp1;
                   i++;
               }
           int temp2 = tab[i];
           tab[i] = tab[fin];
           tab[fin] = temp2;
           quicksort(debut, i-1, tab);
           quicksort(i+1, fin, tab);
       }
    }
    public static void triParSelection (int[] tab){
        int posMin, pivot;
        for(int i=0; i<tab.length-1; i++){
            posMin = i;
            for(int j=i; j<tab.length; j++){
                if(tab[j]<tab[posMin]) posMin=j;
            }
            pivot=tab[i];
            tab[i]=tab[posMin];
            tab[posMin]=pivot;
        }
        System.out.println("Tri par sélection effectué.");
    }
    public static void triAPeigne (int[] tab){
        double gap=tab.length;
        int pivot;
        boolean echangé;
        do{
            echangé=false;
            gap=gap/1.3;
            if (gap<1) gap=1;
            for(int i=0; i<tab.length-gap; i++){
                if (tab[i]>tab[(int)(Math.floor(i+gap))]){
                    pivot=tab[i];
                    tab[i]=tab[(int)(Math.floor(i+gap))];
                    tab[(int)(Math.floor(i+gap))]=pivot;
                    echangé=true;
                }
            }
        }while (echangé || gap>1);
        System.out.println("Tri à peigne effectué.");
    }

    public static void triComptage (int[] tab){
        int min = tab[0], maj= tab[0];
        for (int i=0; i<tab.length; i++){
            if (tab[i]>maj) maj=tab[i];
            if (tab[i]<min) min=tab[i];
        }
        // On crée le tabCompteur et on l'initialise
        // Problème : le nombre maximum d'éléments qu'un tableau peut avoir est inférieur à Math.abs(maj)+Math.abs(min)
        int[] tabCompteur = new int[Math.abs(maj)+Math.abs(min)];
        for (int i=0; i<tabCompteur.length; i++)
            tabCompteur[i]=0;
        // On décompte
        for (int i=0; i<tab.length; i++){
            tabCompteur[Math.abs(tab[i])+Math.abs(min)]+=1;
            if (maj<0 && min<0) tabCompteur[Math.abs(tab[i])+Math.abs(min)]+=1;
            if (maj>0 && min<0) tabCompteur[tab[i]+Math.abs(min)]+=1;
            else tabCompteur[tab[i]+min]+=1;
        }
        int j;
        int k=0;
        for (int i=0; i<tabCompteur.length; i++){
            j=0;
            while(j<tabCompteur[i]){
                if (maj<0 && min<0) tab[k]=-i-min;
                if (maj>0 && min<0) tab[k]=i-min;
                else tab[k]=i+min;
                k++;
                j++;
            }
        }
        for (int s: tab)
            System.out.print(s);
        System.out.println("Tri comptage effectué.");
    }


    public static int[] générerDonnées(int n) {
        Random random = new Random();
        int[] t = new int[n];
        for (int i = 0 ; i < t.length ; i++)
            t[i] = random.nextInt(); // tirage aléatoire d'un int quelconque (compris entre -2^31 et 2^31-1)
        return t;
    }
}


